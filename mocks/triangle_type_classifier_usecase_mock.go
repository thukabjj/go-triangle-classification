// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/triangle/classifier/triangle_type_classifier_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/thukabjj/go-triangle-classification/domain"
)

// MockTriangleTypeClassifierUseCase is a mock of TriangleTypeClassifierUseCase interface.
type MockTriangleTypeClassifierUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTriangleTypeClassifierUseCaseMockRecorder
}

// MockTriangleTypeClassifierUseCaseMockRecorder is the mock recorder for MockTriangleTypeClassifierUseCase.
type MockTriangleTypeClassifierUseCaseMockRecorder struct {
	mock *MockTriangleTypeClassifierUseCase
}

// NewMockTriangleTypeClassifierUseCase creates a new mock instance.
func NewMockTriangleTypeClassifierUseCase(ctrl *gomock.Controller) *MockTriangleTypeClassifierUseCase {
	mock := &MockTriangleTypeClassifierUseCase{ctrl: ctrl}
	mock.recorder = &MockTriangleTypeClassifierUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriangleTypeClassifierUseCase) EXPECT() *MockTriangleTypeClassifierUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTriangleTypeClassifierUseCase) Execute(triangle *domain.Triangle) domain.TriangleType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", triangle)
	ret0, _ := ret[0].(domain.TriangleType)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTriangleTypeClassifierUseCaseMockRecorder) Execute(triangle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTriangleTypeClassifierUseCase)(nil).Execute), triangle)
}
