// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/authentication/authentication_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/thukabjj/go-triangle-classification/domain"
)

// MockAuthenticationUseCase is a mock of AuthenticationUseCase interface.
type MockAuthenticationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationUseCaseMockRecorder
}

// MockAuthenticationUseCaseMockRecorder is the mock recorder for MockAuthenticationUseCase.
type MockAuthenticationUseCaseMockRecorder struct {
	mock *MockAuthenticationUseCase
}

// NewMockAuthenticationUseCase creates a new mock instance.
func NewMockAuthenticationUseCase(ctrl *gomock.Controller) *MockAuthenticationUseCase {
	mock := &MockAuthenticationUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthenticationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationUseCase) EXPECT() *MockAuthenticationUseCaseMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationUseCase) Authenticate(username, password string) (*domain.Authentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", username, password)
	ret0, _ := ret[0].(*domain.Authentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationUseCaseMockRecorder) Authenticate(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationUseCase)(nil).Authenticate), username, password)
}
